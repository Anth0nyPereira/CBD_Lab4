#1
MATCH(Person) -[:DIRECTED] -> (Movie) <- [:ACTED_IN] - (Person) 
RETURN DISTINCT Person.name, Movie.title

#2
MATCH(Person) -[:ACTED_IN] -> (Movie) 
WHERE Movie.released > 2005
RETURN Movie, COLLECT(Person)

#3
MATCH (n)-[r]-(m) 
WHERE ID(n) < ID(m) # não haver relações repetidas/ordem trocada/o que acontecia no tutorial que era bué estúpido tbh
WITH n,m, count(r) as countRel
WHERE countRel > 1
RETURN DISTINCT n, m

#4
MATCH (reviewer1)-[:REVIEWED]->(movie)<-[:REVIEWED]-(reviewer2) 
WHERE ID(reviewer1) > ID(reviewer2)
RETURN DISTINCT reviewer1.name,reviewer2.name, movie.title

#5
MATCH (Person1)-[:ACTED_IN]->(Movie)<-[:ACTED_IN]-(Person2) 
WHERE ID(Person1) > ID(Person2)
WITH Person1, Person2, count(Movie) as movieCount
WHERE movieCount > 1 
RETURN DISTINCT Person1, Person2
 
#6
MATCH (Person)-[r:ACTED_IN]->(Movie {title:"Apollo 13"})
WITH date.realtime().year - round(avg(Person.born)) as avgAge
RETURN avgAge

#7
MATCH (Person)-[r:ACTED_IN]->(Movie)
WITH Movie, Movie.released - avg(Person.born) as avgAge
RETURN Movie.title as movie, round(avgAge*100)/100 as medAge
ORDER BY avgAge DESC
LIMIT 10

#8
MATCH (actor)-[r:ACTED_IN]->(movie)
WITH movie as youngMovie, movie.released - avg(actor.born) as ageAvg
ORDER BY ageAvg
LIMIT 1
MATCH (actor)-[r:ACTED_IN]->(youngMovie)
RETURN youngMovie, actor

#9
MATCH path=shortestPath(
(startingNode {name:"John Cusack"})-[*]-(endingNode {name:"Demi Moore"}))
RETURN path

#10
MATCH path=shortestPath(
(startingNode:Person {name:"Keanu Reeves"})-[*]-(endingNode:Person {name:"Tom Cruise"}))
UNWIND nodes(path) as n
RETURN COUNT(DISTINCT n)

#11
MATCH path=shortestPath(
(startingNode:Person)-[*]-(endingNode:Person))
WHERE startingNode.name CONTAINS 'Jim' and endingNode.name CONTAINS 'Kevin'
UNWIND nodes(path) as n
WITH startingNode, endingNode, COUNT(DISTINCT n) as dimension
RETURN startingNode, endingNode, dimension

#12
MATCH path=shortestPath(
(startingNode:Person)-[*..2]-(endingNode:Person {name:"Jim Cash"}))
WHERE startingNode <> endingNode
UNWIND nodes(path) as n
WITH startingNode, path, COUNT(DISTINCT n) as dimension
WHERE dimension = 3
RETURN DISTINCT startingNode

#13
MATCH path=shortestPath(
(startingNode:Person)-[*1..20]-(endingNode:Person {name:"Kevin Bacon"}))
WHERE startingNode <> endingNode
UNWIND nodes(path) as n
WITH DISTINCT startingNode, path, COUNT(DISTINCT n) as dimension
ORDER BY dimension DESC
LIMIT 1
RETURN dimension

#14
MATCH path=shortestPath(
(startingNode:Person)-[*1..20]-(endingNode:Person))
WHERE ID(startingNode) > ID(endingNode)
UNWIND nodes(path) as n
WITH startingNode, path, COUNT(DISTINCT n) as dimension
ORDER BY dimension DESC
LIMIT 1
RETURN dimension

#15
MATCH path=shortestPath(
(startingNode:Person)-[*1..20]-(endingNode:Person))
WHERE ID(startingNode) > ID(endingNode)
UNWIND nodes(path) as n
WITH startingNode, path, COUNT(DISTINCT n) as dimension
ORDER BY dimension
RETURN dimension, count(dimension)

#16
MATCH path=shortestPath(
(startingNode:Person)-[:ACTED_IN*..20]-(endingNode:Person))
WHERE startingNode <> endingNode
UNWIND nodes(path) as n
WITH startingNode, path, COUNT(DISTINCT n) as dimension
RETURN startingNode, avg(dimension) as average
ORDER BY average
LIMIT 10
